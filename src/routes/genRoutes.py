# routeGen.py
# Generates Express ESM route files for your MERN backend.
# Place this file inside your /routes directory and run:  python3 routeGen.py

from pathlib import Path
from textwrap import dedent

BASE = Path(__file__).parent.resolve()

# ------------ Helpers

def write_file(path: Path, content: str):
    path.write_text(content.strip() + "\n", encoding="utf-8")
    print(f"âœ” wrote {path.relative_to(BASE)}")

def header_comment(name: str) -> str:
    return f"// Auto-generated by routeGen.py â€” {name} routes\n// Feel free to edit as needed.\n"

def basic_router_prelude() -> str:
    return dedent('''\
        import express from "express";
        import { protect } from "../middlewares/auth.js";
        import { validate } from "../middlewares/validator.js";
    ''')

def make_resource_router(
    name,
    controller,                 # e.g. "billController"
    base_validations=None,      # dict of { op: { importFrom, schemaName } } for create/update
    protect_all=True,
    extra_imports=None,         # list of extra imports (strings)
    inline_routes=None,         # list of raw route lines to insert
    resource_path=None,         # default: /<namePlural>
    resource_ops=None           # dict for REST ops (list, create, read, update, delete)
):
    if resource_path is None:
        resource_path = "/"

    if base_validations is None:
        base_validations = {}

    if resource_ops is None:
        resource_ops = {
            "list":   f"get{controller.title().replace('Controller','') + 's'}",
            "create": f"create{controller.title().replace('Controller','')}",
            "read":   f"get{controller.title().replace('Controller','')}",
            "update": f"update{controller.title().replace('Controller','')}",
            "delete": f"delete{controller.title().replace('Controller','')}",
        }

    cbase = controller.replace("Controller", "")
    cap   = cbase[0].upper() + cbase[1:]

    imports = [
        f'import {{ {", ".join(filter(None, resource_ops.values()))} }} from "../controllers/{controller}.js";'
    ]
    if extra_imports:
        imports.extend(extra_imports)

    # optional validation imports
    val_lines = []
    if "create" in base_validations:
        val = base_validations["create"]
        val_lines.append(f'import {{ {val["schema"]} }} from "../validations/{val["from"]}.js";')
    if "update" in base_validations:
        val = base_validations["update"]
        val_lines.append(f'import {{ {val["schema"]} }} from "../validations/{val["from"]}.js";')

    prelude = basic_router_prelude() + "\n" + "\n".join(imports + val_lines) + "\n\nconst router = express.Router();\n"

    body = []
    if protect_all:
        body.append("// ðŸ”’ Protect all routes below\nrouter.use(protect);\n")

    # collection routes
    create_schema = base_validations.get("create", {}).get("schema")
    list_fn   = resource_ops.get("list")
    create_fn = resource_ops.get("create")
    read_fn   = resource_ops.get("read")
    update_fn = resource_ops.get("update")
    delete_fn = resource_ops.get("delete")

    # /  -> list, create
    coll_route = f'router.route("/").get({list_fn})'
    if create_fn:
        if create_schema:
            coll_route += f'\n  .post(validate({create_schema}), {create_fn});'
        else:
            coll_route += f'\n  .post({create_fn});'
    coll_route += "\n"
    body.append(coll_route)

    # /:id -> read, update, delete
    item_route = f'router.route("/:id").get({read_fn}).patch({update_fn}).delete({delete_fn});\n'
    body.append(item_route)

    # inline extras
    if inline_routes:
        body.extend(inline_routes)

    trailer = "\nexport default router;\n"
    return header_comment(name) + prelude + "\n".join(body) + trailer

# ------------ Files to generate

files = {}

# AUTH (unprotected register/login, protected /me)
files["auth.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” auth routes
    // Feel free to edit as needed.
    import express from "express";
    import { register, login, getMe } from "../controllers/authController.js";
    import { protect } from "../middlewares/auth.js";
    import { validate } from "../middlewares/validator.js";
    import { registerSchema, loginSchema } from "../validations/authValidation.js";

    const router = express.Router();

    router.post("/register", validate(registerSchema), register);
    router.post("/login", validate(loginSchema), login);
    router.get("/me", protect, getMe);

    export default router;
''')

# PGs
files["pgs.js"] = make_resource_router(
    name="pgs",
    controller="pgController",
    base_validations={"create": {"from": "pgValidation", "schema": "createPgSchema"}},
    inline_routes=[
        # Nested: rooms under PG
        'router.get("/:pgId/rooms", getRoomsByPg);',
        'router.post("/:pgId/rooms", validate(createRoomSchema), createRoomForPg);'
    ],
    extra_imports=[
        'import { getRoomsByPg, createRoomForPg } from "../controllers/roomController.js";',
        'import { createRoomSchema } from "../validations/roomValidation.js";'
    ]
)

# Rooms
files["rooms.js"] = make_resource_router(
    name="rooms",
    controller="roomController",
    base_validations={"create": {"from": "roomValidation", "schema": "createRoomSchema"}},
    inline_routes=[
        'router.get("/:id/beds", getBedsByRoom);',
        'router.post("/:id/beds", validate(createBedSchema), createBedForRoom);'
    ],
    extra_imports=[
        'import { getBedsByRoom, createBedForRoom } from "../controllers/bedController.js";',
        'import { createBedSchema } from "../validations/bedValidation.js";'
    ]
)

# Beds
files["beds.js"] = make_resource_router(
    name="beds",
    controller="bedController",
    base_validations={"create": {"from": "bedValidation", "schema": "createBedSchema"}},
    inline_routes=[
        'router.get("/:id/availability", getBedAvailability);'
    ],
    extra_imports=[
        'import { getBedAvailability } from "../controllers/availabilityController.js";'
    ]
)

# Tenants
files["tenants.js"] = make_resource_router(
    name="tenants",
    controller="tenantController",
    base_validations={"create": {"from": "tenantValidation", "schema": "createTenantSchema"}},
    inline_routes=[
        'router.get("/:id/occupancies", getTenantOccupancies);',
        'router.get("/:id/bills", getTenantBills);',
        'router.get("/:id/transactions", getTenantTransactions);',
        'router.get("/:id/documents", getTenantDocuments);'
    ],
    extra_imports=[
        'import { getTenantOccupancies } from "../controllers/occupancyController.js";',
        'import { getTenantBills } from "../controllers/billController.js";',
        'import { getTenantTransactions } from "../controllers/transactionController.js";',
        'import { getTenantDocuments } from "../controllers/tenantDocumentController.js";'
    ]
)

# Occupancies
files["occupancies.js"] = make_resource_router(
    name="occupancies",
    controller="occupancyController",
    base_validations={"create": {"from": "occupancyValidation", "schema": "createOccupancySchema"}},
    inline_routes=[
        'router.post("/:id/close", closeOccupancy);',
        'router.post("/:id/transfer", transferOccupancy);'
    ],
    extra_imports=[
        'import { closeOccupancy, transferOccupancy } from "../controllers/occupancyController.js";'
    ]
)

# Bills
files["bills.js"] = make_resource_router(
    name="bills",
    controller="billController",
    base_validations={"create": {"from": "billValidation", "schema": "createBillSchema"}},
    inline_routes=[
        'router.get("/:id/summary", getBillSummary);',
        'router.post("/:id/recalculate", recalculateBill);',
        'router.post("/:id/mark-paid", markBillPaid);'
    ],
    extra_imports=[
        'import { getBillSummary, recalculateBill, markBillPaid } from "../controllers/billController.js";',
    ]
)

# Transactions
files["transactions.js"] = make_resource_router(
    name="transactions",
    controller="transactionController",
    base_validations={"create": {"from": "transactionValidation", "schema": "createTransactionSchema"}}
)

# Documents
files["documents.js"] = make_resource_router(
    name="documents",
    controller="documentController",
    base_validations={"create": {"from": "documentValidation", "schema": "createDocumentSchema"}}
)

# TenantDocuments (M:N)
files["tenantDocuments.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” tenantDocuments routes
    // Feel free to edit as needed.
    import express from "express";
    import { protect } from "../middlewares/auth.js";
    import { validate } from "../middlewares/validator.js";
    import {
      getTenantDocuments,
      linkTenantDocument,
      unlinkTenantDocument
    } from "../controllers/tenantDocumentController.js";
    import { linkTenantDocumentSchema } from "../validations/tenantDocumentValidation.js";

    const router = express.Router();

    // ðŸ”’ Protect all routes
    router.use(protect);

    // list by tenant
    router.get("/", getTenantDocuments);

    // link/unlink
    router.post("/", validate(linkTenantDocumentSchema), linkTenantDocument);
    router.delete("/:tenantId/:docId", unlinkTenantDocument);

    export default router;
''')

# Billing runs (batch generation)
files["billingRuns.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” billing runs routes
    import express from "express";
    import { protect } from "../middlewares/auth.js";
    import { validate } from "../middlewares/validator.js";
    import { createBillingRun, previewBillingRun, getBillingRun } from "../controllers/billingRunController.js";
    import { billingRunSchema } from "../validations/billingRunValidation.js";

    const router = express.Router();
    router.use(protect);

    router.post("/", validate(billingRunSchema), createBillingRun);
    router.post("/preview", validate(billingRunSchema), previewBillingRun);
    router.get("/:id", getBillingRun);

    export default router;
''')

# Reports
files["reports.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” reports routes
    import express from "express";
    import { protect } from "../middlewares/auth.js";
    import { arrearsReport, occupancyRateReport, revenueReport } from "../controllers/reportController.js";

    const router = express.Router();
    router.use(protect);

    router.get("/arrears", arrearsReport);                 // ?pgId=&asOf=YYYY-MM-DD
    router.get("/occupancy-rate", occupancyRateReport);    // ?pgId=&from=&to=
    router.get("/revenue", revenueReport);                 // ?pgId=&from=&to=&groupBy=month|pg|room

    export default router;
''')

# Dashboards
files["dashboards.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” dashboards routes
    import express from "express";
    import { protect } from "../middlewares/auth.js";
    import { tenantDashboard } from "../controllers/dashboardController.js";

    const router = express.Router();
    router.use(protect);

    router.get("/tenant/:tenantId", tenantDashboard);

    export default router;
''')

# Search (can be protected or public; we protect)
files["search.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” search routes
    import express from "express";
    import { protect } from "../middlewares/auth.js";
    import { globalSearch } from "../controllers/searchController.js";

    const router = express.Router();
    router.use(protect);

    router.get("/", globalSearch); // /search?q=...

    export default router;
''')

# index.js that mounts everything under /api/v1
files["index.js"] = dedent('''\
    // Auto-generated by routeGen.py â€” routes index
    import express from "express";

    import authRoutes from "./auth.js";
    import pgRoutes from "./pgs.js";
    import roomRoutes from "./rooms.js";
    import bedRoutes from "./beds.js";
    import tenantRoutes from "./tenants.js";
    import occupancyRoutes from "./occupancies.js";
    import billRoutes from "./bills.js";
    import transactionRoutes from "./transactions.js";
    import documentRoutes from "./documents.js";
    import tenantDocumentRoutes from "./tenantDocuments.js";
    import billingRunRoutes from "./billingRuns.js";
    import reportRoutes from "./reports.js";
    import dashboardRoutes from "./dashboards.js";
    import searchRoutes from "./search.js";

    const router = express.Router();

    // Public-ish
    router.use("/auth", authRoutes);

    // Protected groups (each subrouter handles protect)
    router.use("/pgs", pgRoutes);
    router.use("/rooms", roomRoutes);
    router.use("/beds", bedRoutes);
    router.use("/tenants", tenantRoutes);
    router.use("/occupancies", occupancyRoutes);
    router.use("/bills", billRoutes);
    router.use("/transactions", transactionRoutes);
    router.use("/documents", documentRoutes);
    router.use("/tenant-documents", tenantDocumentRoutes);
    router.use("/billing/runs", billingRunRoutes);
    router.use("/reports", reportRoutes);
    router.use("/dashboards", dashboardRoutes);
    router.use("/search", searchRoutes);

    export default router;
''')

# ------------ Write all files

def main():
    BASE.mkdir(parents=True, exist_ok=True)
    for fname, content in files.items():
        write_file(BASE / fname, content)

    # small README note
    readme = dedent('''\
        # Generated routes

        These files were generated by `routeGen.py`. They assume you have the following folders:

        - controllers/
          - authController.js
          - pgController.js
          - roomController.js
          - bedController.js
          - tenantController.js
          - occupancyController.js
          - billController.js
          - transactionController.js
          - documentController.js
          - tenantDocumentController.js
          - billingRunController.js
          - reportController.js
          - dashboardController.js
          - searchController.js
        - middlewares/
          - auth.js
          - validator.js
        - validations/
          - authValidation.js
          - pgValidation.js
          - roomValidation.js
          - bedValidation.js
          - tenantValidation.js
          - occupancyValidation.js
          - billValidation.js
          - transactionValidation.js
          - documentValidation.js
          - tenantDocumentValidation.js
          - billingRunValidation.js

        Mount from your main server file:

        import express from "express";
        import apiRoutes from "./routes/index.js";

        const app = express();
        app.use("/api/v1", apiRoutes);
    ''')
    write_file(BASE / "ROUTES_README.md", readme)

if __name__ == "__main__":
    main()
