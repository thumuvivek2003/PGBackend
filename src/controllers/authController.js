// Auto-generated by controllerGen.py â€” feel free to edit.

import User from "../models/User.js";
import { asyncHandler } from "../middlewares/errorHandler.js";

const setAuthCookie = (res, token) => {
  res.cookie("accessToken", token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "Strict",
    maxAge: 15 * 60 * 1000,
  });
};

// @desc Register user
// @route POST /api/v1/auth/register
// @access Public
export const register = asyncHandler(async (req, res) => {
  const { name, email, phone, password, role } = req.body;
  const user = await User.create({ name, email, phone, password, role });
  const token = user.getSignedJwtToken();
  setAuthCookie(res, token);
  return res.status(201).json({
    success: true,
    message: "User registered successfully",
    data: {
      user: { id: user._id, name: user.name, email: user.email, role: user.role }
    }
  });
});

// @desc Login
// @route POST /api/v1/auth/login
// @access Public
export const login = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email }).select("+password");
  if (!user || !(await user.matchPassword(password))) {
    return res.status(401).json({ success: false, message: "Invalid credentials" });
  }
  const token = user.getSignedJwtToken();
  setAuthCookie(res, token);
  return res.status(200).json({
    success: true,
    message: "Logged in",
    data: { user: { id: user._id, name: user.name, email: user.email, role: user.role } }
  });
});

// @desc Get profile
// @route GET /api/v1/auth/me
// @access Private
export const getMe = asyncHandler(async (req, res) => {
  const user = await User.findById(req.user.id).lean();
  return res.status(200).json({ success: true, data: user });
});
